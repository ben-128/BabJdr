// ============================================================================
// JDR-BAB BUILD SYSTEM - MODULAR TO STANDALONE
// ============================================================================

const fs = require('fs');
const path = require('path');

/**
 * Builds a standalone version from modular files
 * Combines CSS, JS, and JSON into a single HTML file
 */
function buildStandalone() {
  console.log('üî® Building standalone version from modular files...');
  
  const rootDir = path.resolve(__dirname, '..');
  const outputDir = path.join(rootDir, 'build');
  
  // Create output directory
  if (!fs.existsSync(outputDir)) {
    fs.mkdirSync(outputDir, { recursive: true });
    console.log('üìÅ Created output directory');
  }
  
  console.log('üìñ Creating 100% modular build...');
  
  // Create complete HTML structure from scratch
  let htmlContent = `<!DOCTYPE html>
<html lang="fr">
<head>
<meta charset="utf-8">
<meta content="width=device-width, initial-scale=1" name="viewport">
<meta name="referrer" content="no-referrer-when-downgrade">
<title>JDR‚ÄëBAB ‚Äî Livret de r√®gles</title>
<meta content="Livret web multipages des r√®gles JDR‚ÄëBAB, th√®me parchemin, illustrations par cat√©gorie/classe/sous‚Äëclasse, export HTML autonome." name="description">
<link rel="preconnect" href="https://fonts.googleapis.com">
<link rel="preconnect" href="https://fonts.gstatic.com" crossorigin="">
<link href="https://fonts.googleapis.com/css2?family=Cinzel:wght@400;500;600&amp;family=Source+Serif+Pro:ital,wght@0,400;0,600;0,700;1,400;1,600&amp;display=swap" rel="stylesheet">
</head>
<body class="dev-off">

<div class="shell">
  <button aria-controls="sidebar" aria-expanded="false" aria-label="Ouvrir le sommaire" class="menu-toggle" id="menuToggle" style="display:none">‚ò∞ Sommaire</button>
  <div class="backdrop" hidden="" id="backdrop"></div>
  
  <main class="page">
    <aside class="sidebar" id="sidebar">
      <div class="panel">
        <div class="searchbar">
          <input autocomplete="off" id="search" placeholder="Rechercher une r√®gle, une classe‚Ä¶">
          <button class="btn" id="clear" title="Effacer">‚úñ</button>
        </div>
        <div class="tools">
          <!-- Dev mode disabled in standalone version -->
        </div>
        <div class="toc" id="toc">
          <!-- Table of contents will be generated by JavaScript -->
        </div>
      </div>
    </aside>
    
    <div id="views">
      <!-- Main content will be generated by JavaScript -->
      <div id="app-loading">Chargement...</div>
    </div>
  </main>
  
  <footer>
    <p>JDR‚ÄëBAB ‚Äî R√®gles et contenus sous licence libre</p>
  </footer>
</div>

</body>
</html>`;
  
  // Read all CSS files
  const cssFiles = [
    'css/theme.css',
    'css/utilities.css', 
    'css/layout.css',
    'css/components.css',
    'css/editor.css'
  ];
  
  let allCSS = '';
  cssFiles.forEach(cssFile => {
    const cssPath = path.join(rootDir, cssFile);
    if (fs.existsSync(cssPath)) {
      allCSS += fs.readFileSync(cssPath, 'utf-8') + '\n';
      console.log(`‚úì Loaded ${cssFile}`);
    }
  });
  
  // Read all JS files in correct loading order
  const jsFiles = [
    // Core framework files first - JdrApp namespace must be very first
    'js/core.js',                // Core JdrApp namespace - MUST BE FIRST
    'js/config/contentTypes.js',  // Configuration 
    'js/core/EventBus.js',        // Event system
    'js/core/BaseEntity.js',      // Entity base class
    'js/factories/ContentFactory.js', // Factory pattern
    'js/builders/CardBuilder.js',  // Card builder
    'js/builders/PageBuilder.js',  // Page builder
    'js/utils.js',               // Utilities
    
    // Feature modules
    'js/modules/images.js',       // Image module
    'js/storage.js',              // Storage functions
    'js/router.js',               // Router module
    'js/renderer.js',             // Renderer module
    'js/core/UnifiedEditor.js',   // Unified editor
    'js/editor.js',               // Editor module
    'js/features/SpellFilter.js', // Spell filter feature
    'js/ui.js'                    // UI module - last
  ];
  
  let allJS = '';
  jsFiles.forEach(jsFile => {
    const jsPath = path.join(rootDir, jsFile);
    if (fs.existsSync(jsPath)) {
      allJS += fs.readFileSync(jsPath, 'utf-8') + '\n';
      console.log(`‚úì Loaded ${jsFile}`);
    }
  });
  
  // Read all JSON data files
  const dataFiles = [
    'sorts.json', 'classes.json', 'competences-tests.json', 
    'creation.json', 'dons.json', 'objets.json', 'elements.json', 'etats.json',
    'images.json', 'static-pages-config.json', 'stats.json', 'toc-structure.json',
    'monstres.json'
  ];
  
  let dataObject = {};
  dataFiles.forEach(dataFile => {
    const dataPath = path.join(rootDir, 'data', dataFile);
    if (fs.existsSync(dataPath)) {
      const key = dataFile.replace('.json', '').replace('-', '_');
      dataObject[key] = JSON.parse(fs.readFileSync(dataPath, 'utf-8'));
      console.log(`‚úì Loaded ${dataFile}`);
    }
  });
  
  // No need to remove anything since we're building from scratch
  
  // Add timestamp
  const timestamp = new Date().toISOString();
  htmlContent = htmlContent.replace(
    '<title>',
    `<!-- Generated on ${timestamp} by JdrBab Build System -->\n<title>`
  );
  
  // Inject CSS
  htmlContent = htmlContent.replace(
    '</head>',
    `<style>\n${allCSS}</style>\n</head>`
  );
  
  // Inject data and JavaScript - create complete standalone app
  const dataScript = `
    // Ensure window object exists
    window = window || {};
    
    // Global data from modular files
    window.SORTS = ${JSON.stringify(dataObject.sorts || {}, null, 2)};
    window.CLASSES = ${JSON.stringify(dataObject.classes || {}, null, 2)};
    window.DONS = ${JSON.stringify(dataObject.dons || {}, null, 2)};
    window.OBJETS = ${JSON.stringify(dataObject.objets || {}, null, 2)};
    window.MONSTRES = ${JSON.stringify(dataObject.monstres || [], null, 2)};
    window.IMAGES = ${JSON.stringify(dataObject.images || {}, null, 2)};
    
    // TOC Structure for advanced navigation
    window.TOC_STRUCTURE = ${JSON.stringify(dataObject.toc_structure || {}, null, 2)};
    
    // Build STATIC_PAGES correctly by combining individual page data
    window.STATIC_PAGES = {
      'creation': ${JSON.stringify(dataObject.creation || {}, null, 2)},
      'elements': ${JSON.stringify(dataObject.elements || {}, null, 2)},
      'stats': ${JSON.stringify(dataObject.stats || {}, null, 2)},
      'competences-tests': ${JSON.stringify(dataObject.competences_tests || {}, null, 2)},
      'etats': ${JSON.stringify(dataObject.etats || {}, null, 2)}
    };
    
    // Static pages configuration
    window.STATIC_PAGES_CONFIG = ${JSON.stringify(dataObject.static_pages_config || {}, null, 2)};
    
    // Mark as standalone version for renderer
    window.STANDALONE_VERSION = true;
    
    // Initialize app when DOM is ready
    document.addEventListener('DOMContentLoaded', function() {
      // Ensure dev mode is off
      document.body.className = 'dev-off';
      
      // Wait a bit to ensure all modules are loaded
      setTimeout(function() {
        // Initialize JdrApp if it exists
        if (window.JdrApp && window.JdrApp.init) {
          console.log('Initializing JdrApp...');
          window.JdrApp.init();
        } else {
          console.error('JdrApp not found!', window.JdrApp);
        }
      }, 100);
    });
  `;
  
  htmlContent = htmlContent.replace(
    '</body>',
    `<script>\n${dataScript}\n${allJS}\n</script>\n</body>`
  );
  
  // Remove any external script tags that might have been added somehow
  htmlContent = htmlContent.replace(/<script src="[^"]*"><\/script>\s*/g, '');
  
  console.log('üîí Dev mode disabled in standalone version');
  
  // Write to output
  const outputPath = path.join(outputDir, 'JdrBab.html');
  fs.writeFileSync(outputPath, htmlContent, 'utf-8');
  
  const sizeKB = (fs.statSync(outputPath).size / 1024).toFixed(1);
  
  console.log('‚úÖ Build completed successfully!');
  console.log(`üìÑ Output: ${outputPath}`);
  console.log(`üìä Size: ${sizeKB} KB`);
  console.log('üéØ File is ready for distribution');
}

// Run build
if (require.main === module) {
  buildStandalone();
}

module.exports = buildStandalone;